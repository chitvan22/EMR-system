# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XSuPNzX5Fs77OrSrvB2MGmjGdWL_rRLj
"""

from os import error                                                                      #importing libraries
from typing import List, Dict, Optional                                                   
import re


def readPatientsFromFile(fileName):                                                       #defining first function to read txt file and add data to a dictionary
  patients = {}                                                                           #declaring empty dictionary
  try:                                                                                    #try to open file
    with open(fileName,"r") as inputFile:                                                 #open file read mode
      for line in inputFile:                                                              #iterate through lines 
          line = line.split(",")                                                          #split the words in the line at ,
          if len(line) != 8:                                                              #if the line does not have eight elements afetr splitting
            print(f"Invalid number of fields ({len(line)}) in line: {','.join(line)}")    #prints error with line description
            continue                                                                      #continues to next iteration in the for loop
          try:                                                                            #try to convert strings read to required types and stores them in variables
            ID = int(line[0])               
            date = line[1]
            temperature = float(line[2])
            heartRate = int(line[3])
            respiratoryRate = int(line[4])
            systolicBP = int(line[5])
            diastolicBP = int(line[6])
            oxygenSaturation = int(line[7])

            if not (35 < temperature < 42):                                               #check temperature within range
             print(f"Invalid temperature value ({temperature}) in line: {line}")          #prints if invalid temperature found
             continue                                                                     #continues to next iteration in for loop
            if not (30 < heartRate < 180):                                                #check heart rate within range
             print(f"Invalid heart rate value ({heartRate}) in line: {line}")             #prints if invalid heart rate found
             continue                                                                     #continues to next iteration in the for loop
            if not (5 < respiratoryRate < 40):                                            #check respiratory rate within range
             print(f"Invalid respiratory rate value ({respiratoryRate}) in line: {line}") #prints if out of range value found
             continue                                                                     #continues to nextfor loop iteration
            if not (70 < systolicBP < 200):                                               #Checks if Systolic BP within range
             print(f"Invalid systolic blood pressure value ({systolicBP}) in line: {line}")#prints if out of range systolic BP found
             continue                                                                     #continues to next for loop iteration
            if not (40 < diastolicBP < 120):                                              #checks if diastolic BP is within range
             print(f"Invalid diastolic blood pressure value ({diastolicBP}) in line: {line}")#prints if out of range value found
             continue                                                                     #continues to nextfor loop iteration
            if not (70 < oxygenSaturation < 100):                                         #checks if oxygen saturation is within range
             print(f"Invalid oxygen saturation value ({oxygenSaturation}) in line: {line}")#prints if out of range value found
             continue                                                                     #continues to next for loop iteration
            visit = [date, temperature, heartRate, respiratoryRate, systolicBP, diastolicBP, oxygenSaturation] #adds all the values to the list visit
            
            if ID in patients:                                                            #checks if patientID already exists
              patients[ID].append(visit)                                                  #if exists then adds the list to the list associated with that patient ID(key)
            else:                                                                         #if ID does not exist
              patients[ID] = [visit]                                                      #associates created list with a new ID or key
          except ValueError:                                                              #if datatype invalid prints error
            print(f"Invalid data type in line: {','.join(line)}")                         #printing error with line
            continue                                                                      #skips and continues to next for loop iteration
  except FileNotFoundError:                                                               #Handling unable to open file error
    print(f"The file {fileName} could not be found.")                                     #prints error
  except:                                                                                 #Handling unexpected errors
    print("An unexpected error occurred while reading the file.")                         #Print statement
  return patients                                                                         #returns dictionary patients


def displayPatientData(patients, patientId=0):                                            #function to displaypatients data or all patients' data
    """
    Displays patient data for a given patient ID.

    patients: A dictionary of patient dictionaries, where each patient has a list of visits.
    patientId: The ID of the patient to display data for. If 0, data for all patients will be displayed.
    """
    if patientId == 0:                                                                    #display all patient's data                                                                     
        for patient in patients:                                                          #for loop to iterate through the dictionary
            print(f"Patient ID: {patient}")                                               #prints patientID
            for visit in patients[patient]:                                               #access lists associated with key patient
                print(" Visit Date:", visit[0])                                           #prints elements in the list with required statements
                print("  Temperature:", "%.2f" % visit[1], " C")
                print("  Heart Rate: ",visit[2], " bpm")
                print("  Respiratory Rate: ",visit[3], " bpm")
                print("  Systolic Blood Pressure:", visit[4], "mmHg")
                print("  Diastolic Blood Pressure:", visit[5],"mmHg")
                print("  Oxygen Saturation:", visit[6], "%")
            print()                                                                       #blank line after completing the for loop
    else:                                                                                 #else statement if PatintID is provided
        if patientId in patients:                                                         #display specified patient's data
            print(f"Patient ID: {patientId}")                                             #prints patientID(key)
            for visit in patients[patientId]:                                             #for loop to iterate through each list associated with the key
                print(f" Visit Date: {visit[0]}")                                         #prints elements in the list with required statements
                print("  Temperature:", "%.2f" % visit[1], " C")
                print(f"  Heart Rate: {visit[2]} bpm")
                print(f"  Respiratory Rate: {visit[3]} bpm")
                print(f"  Systolic Blood Pressure: {visit[4]} mmHg")
                print(f"  Diastolic Blood Pressure: {visit[5]} mmHg")
                print(f"  Oxygen Saturation: {visit[6]} %")
        else:                                                                             #if entered patientID is not found
                print(f"Patient with ID {patientId} not found.")                          #prints the error with entered patientID

def displayStats(patients, patientId=0):                                                  #display vital signs for patients 
    """
    Prints the average of each vital sign for all patients or for the specified patient.

    patients: A dictionary of patient IDs, where each patient has a list of visits.
    patientId: The ID of the patient to display vital signs for. If 0, vital signs will be displayed for all patients.
    """
    sumTemp = 0.0                                                                         #Initialize variables to hold sum of vital signs
    sumHeartRate = 0.0
    sumRespRate = 0.0
    sumSysBP = 0.0
    sumDiaBP = 0.0
    sumOxySat = 0.0
    numVisits = 0.0                                                                       #Initialize varialbe to hold number of iterations 
    try:                                                                                  #If patientId is not 0, display data for that specific patient
      patientId = int(patientId)                                                          #Convert entered patient ID to integer
    except:                                                                               #if unable to covert   
      print("Error: 'patientId' should be an integer.")                                   #print error
      return                                                                              #exit this function
    
    if patientId != 0:                                                                    #enters if statement if patient id was entered
        if patientId not in patients:                                                     #checks if patient ID is one of the keys in the dictionary
            print("No data found for patient with ID {}.".format(patientId))              #prints erros if no data found
            return                                                                        #exits function
        
        elif patientId in patients:                                                       #case where patientID is one of the keys in the dictionary 
          visits = patients[patientId]                                                    #access each list in list associted with the key 
          numVisits = len(visits)                                                         #gets total number of visits
        
          for visit in visits:                                                            #Calculate sum of vital signs for specific patient
            sumTemp += visit[1]
            sumHeartRate += visit[2]
            sumRespRate += visit[3]
            sumSysBP += visit[4]
            sumDiaBP += visit[5]
            sumOxySat += visit[6]

          avgTemp = sumTemp / numVisits                                                   #Calculate averages for specific patient
          avgHeartRate = sumHeartRate / numVisits
          avgRespRate = sumRespRate / numVisits
          avgSysBP = sumSysBP / numVisits
          avgDiaBP = sumDiaBP / numVisits
          avgOxySat = sumOxySat / numVisits

        print("Vital signs for Patient {}:".format(patientId))                            #Prints vital signs for specific patient
        print("  Average temperature: {:.2f} C".format(avgTemp))
        print("  Average heart rate: {:.2f} bpm".format(avgHeartRate))
        print("  Average respiratory rate: {:.2f} bpm".format(avgRespRate))
        print("  Average systolic blood pressure: {:.2f} mmHg".format(avgSysBP))
        print("  Average diastolic blood pressure: {:.2f} mmHg".format(avgDiaBP))
        print("  Average oxygen saturation: {:.2f} %".format(avgOxySat))

    else:                                                                                 #If patientId is 0, display data for all patients
        for patientId in patients:                                                        #Calculate sum of vital signs for all patients
            visits = patients[int(patientId)]                                             #acces list associted with the key 
            numVisits += len(visits)                                                      #getting number of visits
            if numVisits == 0:                                                            #in case no visits found
                print("No data found for any patients.")                                  #prints error
                return                                                                    #exist the function

            for visit in visits:                                                          #accessing list in the list of  lists
                sumTemp += visit[1]                                                       #adding vital sign values
                sumHeartRate += visit[2]
                sumRespRate += visit[3]
                sumSysBP += visit[4]
                sumDiaBP += visit[5]
                sumOxySat += visit[6]

        avgTemp = sumTemp / numVisits                                                    #calculate average of vital signs 
        avgHeartRate = sumHeartRate / numVisits
        avgRespRate = sumRespRate / numVisits
        avgSysBP = sumSysBP / numVisits
        avgDiaBP = sumDiaBP / numVisits
        avgOxySat = sumOxySat / numVisits

        print("Vital Signs for All Patients:")                                           #print out vital signs for all patients
        print("  Average temperature: {:.2f} C".format(avgTemp))
        print("  Average heart rate: {:.2f} bpm".format(avgHeartRate))
        print("  Average respiratory rate: {:.2f} bpm".format(avgRespRate))
        print("  Average systolic blood pressure: {:.2f} mmHg".format(avgSysBP))
        print("  Average diastolic blood pressure: {:.2f} mmHg".format(avgDiaBP))
        print("  Average oxygen saturation: {:.2f} %".format(avgOxySat))

def addPatientData(patients, patientId, date, temp, hr, rr, sbp, dbp, spo2, fileName):   #program to add patient data
    """
    Adds new patient data to the patient list.

    patients: The dictionary of patient IDs, where each patient has a list of visits, to add data to.
    patientId: The ID of the patient to add data for.
    date: The date of the patient visit in the format 'yyyy-mm-dd'.
    temp: The patient's body temperature.
    hr: The patient's heart rate.
    rr: The patient's respiratory rate.
    sbp: The patient's systolic blood pressure.
    dbp: The patient's diastolic blood pressure.
    spo2: The patient's oxygen saturation level.
    fileName: The name of the file to append new data to.
    """
    if not re.match(r'^\d{4}-\d{2}-\d{2}$',date):                                         #check if date is in the correct format (yyyy-mm-dd)
       print("Invlid date format. Please enter date in format 'yyyy-mm-yy'.")             #prints error message
       return                                                                             #exits function

    splitDate = date.split('-')                                                           #check if date is valid. Splits date at -
                                                                                          #converts parts of date to integer and compares it to valid values
    if int(splitDate[0])<1900 or int(splitDate[0])>2023 or int(splitDate[1])<1 or int(splitDate[1])>12 or int(splitDate[2])<1 or int(splitDate[2])>31:
        print("Invalid date. Please enter a valid date.")                                 #if month day or year out of range prints error
        return                                                                            #exits function

    if not (35.0 <= temp <= 42.0):                                                        #check if temperature is valid
        print("Invalid temperature. Please enter a temperature between 35.0 and 42.0 Celsius.") #prints error message
        return                                                                            #exits function

    if not (30 <= hr <= 180):                                                             #check if heart rate is valid
        print("Invalid heart rate. Please enter a heart rate between 30 and 180 bpm.")    #prints error message
        return                                                                            #exits function

    if not (5 <= rr <= 40):                                                               # Check if respiratory rate is valid
        print("Invalid respiratory rate. Please enter a respiratory rate between 5 and 40 bpm.") #prints error message
        return                                                                            #exits function

    if not (70 <= sbp <= 200):                                                            # Check if systolic blood pressure is valid
        print("Invalid systolic blood pressure. Please enter a systolic blood pressure between 70 and 200 mmHg.") #prints error message
        return                                                                            #exits function

    if not (40 <= dbp <= 120):                                                            #check if diastolic blood pressure is valid
        print("Invalid diastolic blood pressure. Please enter a diastolic blood pressure between 40 and 120 mmHg.") #prints error message
        return                                                                            #exits function

    if not (70 <= spo2 <= 100):                                                           #check if oxygen saturation level is valid
        print("Invalid oxygen saturation. Please enter an oxygen saturation between 70 and 100%.") #prints error message
        return                                                                            #exits function

    with open(fileName, 'a') as f:                                                        #append the new visit information to the patient's visit history in the file
        f.write("\n")                                                                     #new line
        f.write(f"{patientId},{date},{temp:.1f},{hr},{rr},{sbp},{dbp},{spo2}")            #adding data in proper format

    print(f"Visit Saved for Patient # {patientId}")                                       #prints success message

def findVisitsByDate(patients, year=None, month=None):                                    #function to find visits by date
    """
    Find visits by year, month, or both.  
 
    patients: A dictionary of patient IDs, where each patient has a list of visits.
    year: The year to filter by.
    month: The month to filter by.
    return: A list of tuples containing patient ID and visit that match the filter.
    """
    filteredVisits = []                                                                   #creating empty list
 
    if not patients:                                                                      #check if patients dictionary is empty
        return filteredVisits                                                             #returns empty list
 
    if year is not None and type(year) != int:                                            #check if year is valid
        return filteredVisits                                                             #returns empty list
 
    if month is not None and type(month) != int:                                          #check if month is valid
        return filteredVisits                                                             #returns empty list
 
    if month is not None and (month < 1 or month > 12):                                   #check if month is valid 
        return filteredVisits                                                             #returns empty list
 
    for patientId in patients:                                                            #iterate over all patients
        for visit in patients[patientId]:                                                 #accessing each list in list of lists associated with PatientId  
            visitYear, visitMonth, visitDay = visit[0].split('-')                         #extract year, month and day from visit
           
            if year is not None and int(visitYear) != year:                               #check if the year and month match the filters
                continue                                                                  #continue to nect iteration
            if month is not None and int(visitMonth) != month:                            #check if month matches or not entered
                continue                                                                  #continue to next iteration
 
            filteredVisits.append((patientId, visit))                                     #add visit to filteredVisits
 
    return filteredVisits                                                                 #returns filtered visits list
   

def findPatientsWhoNeedFollowUp(patients):                                                #Function to find patients with out of range vital signs
    """
    Find patients who need follow-up visits based on abnormal vital signs.

    patients: A dictionary of patient IDs, where each patient has a list of visits.
    return: A list of patient IDs that need follow-up visits to to abnormal health stats.
    """
    followup_patients = []                                                                #create empty list to add patient ids 
    for patient_id in patients:                                                           #for loop to iterate through dictionary
      for visits in patients[patient_id]:                                                 #accesing lists within elements in the dictionary
            if visits[2] > 100 or visits[2] < 60 or visits[4] > 140 or visits[5] > 90 or visits[6] < 90:  #checking out of range vital signs 
                followup_patients.append(patient_id)                                      #adding patient id to list
                break                                                                     #no need to check more visits for this patient
    return followup_patients                                                              #returns list of patients needing follow up


def deleteAllVisitsOfPatient(patients, patientId, filename):                              #function to delete visits of a patient
    """
    Delete all visits of a particular patient.

    patients: The dictionary of patient IDs, where each patient has a list of visits, to delete data from.
    patientId: The ID of the patient to delete data for.
    filename: The name of the file to save the updated patient data.
    return: None
    """
    if patientId not in patients:                                                         #if patientID not found in dictionary
        print(f"No data found for patient with ID {patientId}")                           #print error message
        return                                                                            #exits the function
    
    patients.pop(patientId)                                                               #removes patient record accociated with the key
    with open(filename, 'w') as f:                                                        #open file in write mode
        for patient in patients:                                                          #key in dictionary
            for visit in patients[patient]:                                               #list contained in list assoociated with the id
              f.write(f"{patient},{visit[0]},{visit[1]},{visit[2]},{visit[3]},{visit[4]},{visit[5]},{visit[6]}\n") #rewriting remaining data to the text file in proper format
    print(f"Data for patient {patientId} has been deleted.")                              #Prints success message



###########################################################################
###########################################################################
#   The following code is being provided to you. Please don't modify it.  #
#   If this doesn't work for you, use Google Colab,                       #
#   where these libraries are already installed.                          #
###########################################################################
###########################################################################

def main():
    patients = readPatientsFromFile('patients.txt')
    while True:
        print("\n\nWelcome to the Health Information System\n\n")
        print("1. Display all patient data")
        print("2. Display patient data by ID")
        print("3. Add patient data")
        print("4. Display patient statistics")
        print("5. Find visits by year, month, or both")
        print("6. Find patients who need follow-up")
        print("7. Delete all visits of a particular patient")
        print("8. Quit\n")

        choice = input("Enter your choice (1-8): ")
        if choice == '1':
            displayPatientData(patients)
        elif choice == '2':
            patientID = int(input("Enter patient ID: "))
            displayPatientData(patients, patientID)
        elif choice == '3':
            patientID = int(input("Enter patient ID: "))
            date = input("Enter date (YYYY-MM-DD): ")
            try:
                temp = float(input("Enter temperature (Celsius): "))
                hr = int(input("Enter heart rate (bpm): "))
                rr = int(input("Enter respiratory rate (breaths per minute): "))
                sbp = int(input("Enter systolic blood pressure (mmHg): "))
                dbp = int(input("Enter diastolic blood pressure (mmHg): "))
                spo2 = int(input("Enter oxygen saturation (%): "))
                addPatientData(patients, patientID, date, temp, hr, rr, sbp, dbp, spo2, 'patients.txt')
            except ValueError:
                print("Invalid input. Please enter valid data.")
        elif choice == '4':
            patientID = input("Enter patient ID (or '0' for all patients): ")
            displayStats(patients, patientID)
        elif choice == '5':
            year = input("Enter year (YYYY) (or 0 for all years): ")
            month = input("Enter month (MM) (or 0 for all months): ")
            visits = findVisitsByDate(patients, int(year) if year != '0' else None,
                                      int(month) if month != '0' else None)
            if visits:
                for visit in visits:
                    print("Patient ID:", visit[0])
                    print(" Visit Date:", visit[1][0])
                    print("  Temperature:", "%.2f" % visit[1][1], "C")
                    print("  Heart Rate:", visit[1][2], "bpm")
                    print("  Respiratory Rate:", visit[1][3], "bpm")
                    print("  Systolic Blood Pressure:", visit[1][4], "mmHg")
                    print("  Diastolic Blood Pressure:", visit[1][5], "mmHg")
                    print("  Oxygen Saturation:", visit[1][6], "%")
            else:
                print("No visits found for the specified year/month.")
        elif choice == '6':
            followup_patients = findPatientsWhoNeedFollowUp(patients)
            if followup_patients:
                print("Patients who need follow-up visits:")
                for patientId in followup_patients:
                    print(patientId)
            else:
                print("No patients found who need follow-up visits.")
        elif choice == '7':
            patientID = input("Enter patient ID: ")
            deleteAllVisitsOfPatient(patients, int(patientID), "patients.txt")
        elif choice == '8':
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.\n")


if __name__ == '__main__':
    main()